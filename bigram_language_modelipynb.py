# -*- coding: utf-8 -*-
"""Bigram Language Modelipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t9vz6oHLkeHcJWUTs85mN6UefykkSQED
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import random
import torch

#word = "^кот$"
# bigrams = [word[i:i+2] for i in range(len(word)-1)]
# print(bigrams)


with open('names.txt', 'r') as f:
    data = f.read()

with open('names.txt', 'r') as f:
    names = f.read().splitlines()
for i in range(len(names)):
  names[i] = "1"+names[i]+"0"
#print('All names are presented this way: ', random.sample(names, 10))
print("Nota Bene: 1a = bigram that begins with 'a', n0 = bigram that ends with 'n' ")

orig_bigrams =[]
for j in range(len(names)):
  bigramsss = [names[j][k:k+2] for k in range(len(names[j])-1)]
  orig_bigrams.extend(bigramsss)

print('Bigrams made from names: ',  random.sample(orig_bigrams, 10))

bigrams_len = len(orig_bigrams)
print('The quantity of bigrams: ', bigrams_len)

print('The quantity of names:', len(names))

total_bigrams = len(data) - 1 + len(names)

bigram_freq = {}

# Iterate over the data to extract all possible bigrams and count their frequency
for i in range(len(data) - 1):
    bigram = data[i:i+2]
    if bigram in bigram_freq:
        bigram_freq[bigram] += 1
    else:
        bigram_freq[bigram] = 1

# Add the bigrams from the names
for name in names:
    for i in range(len(name) - 1):
        bigram = name[i:i+2]
        if bigram in bigram_freq:
            bigram_freq[bigram] += 1
        else:
            bigram_freq[bigram] = 1

bigram_prob = {}
for bigram, freq in bigram_freq.items():
    prob = freq / total_bigrams
    bigram_prob[bigram] = prob
bigram_prob = {k: v for k, v in bigram_prob.items() if "'\'" not in k}


name_starters = [x for x in orig_bigrams if '1' in x]
name_mid_end =  [x for x in orig_bigrams if not '1' in x]
#print(name_mid_end)

bigrams_len = len(orig_bigrams)
# Calculate the frequency of each bigram
bigram_counts = pd.Series(orig_bigrams).value_counts()

# Calculate the probability of each bigram
total_bigrams = len(orig_bigrams)
bigram_probs = bigram_counts / total_bigrams

# Sort the probabilities in descending order and take the top 10
top_bigram_probs = bigram_probs.sort_values(ascending=False).head(10)

# Create a bar plot of the top 10 bigram probabilities
plt.bar(x=top_bigram_probs.index, height=top_bigram_probs.values)
plt.xticks(rotation=45)
plt.xlabel('Bigram')
plt.ylabel('Probability')
plt.title('Top 10 Letter Bigram Probabilities')
plt.show()

# Randomly generate name 
# print('Name beginning options: ',  random.sample(name_starters, 10))
name_begin = random.choice(name_starters)
print('Name-making process: ', name_begin)
while True:
  name_continue = random.choice(name_mid_end)
  name_begin = name_begin + name_continue
  print(name_begin)
  if '0' in name_continue: break 
made_name = ''.join([i for i in name_begin if not i.isdigit()])
print('Made name is',made_name.capitalize())